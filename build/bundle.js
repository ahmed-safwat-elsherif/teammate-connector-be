(()=>{"use strict";var e,t,s,a,o={470:(e,t,s)=>{e.exports=s.p+"cb7f4e5f4b7b40355321.js"},268:e=>{e.exports=require("body-parser")},672:e=>{e.exports=require("colors")},577:e=>{e.exports=require("cors")},469:e=>{e.exports=require("dotenv/config")},252:e=>{e.exports=require("express")},716:e=>{e.exports=require("moment")},31:e=>{e.exports=require("sequelize")},896:e=>{e.exports=require("fs")},455:e=>{e.exports=require("node:fs/promises")},760:e=>{e.exports=require("node:path")},928:e=>{e.exports=require("path")},347:(e,t,s)=>{s.d(t,{B:()=>o});const a=require("url"),o=(a.fileURLToPath("file:///C:/Ahmed/projects/teammate-connector-be/filePath.js"),a.fileURLToPath(new URL(s(470),s.b)))},620:(e,t,s)=>{s.a(e,(async(e,t)=>{try{var a=s(252),o=s(577),r=(s(469),s(24)),n=s(268),i=s(71),l=s(513),c=s(275),d=s(542),u=s(260),I=s(764),p=s(11),_=e([u]);u=(_.then?(await _)():_)[0];const E=a();(async()=>{await p.A.init()})(),E.use(o()),E.use(n.json()),E.use(n.urlencoded({extended:!0})),E.use(i.A),E.get("/",((e,t)=>{t.redirect("/docs")})),E.use("/sync",l.A),E.use("/auth",c.A),E.use("/logs",d.A),E.listen(r.p8,(async()=>{(0,I.A)(E,r.p8),console.log(`Server is running on port:${r.p8}`)})),t()}catch(e){t(e)}}))},24:(e,t,s)=>{s.d(t,{Hf:()=>r,I1:()=>d,II:()=>I,U9:()=>o,VE:()=>_,YL:()=>g,dN:()=>i,gd:()=>l,iK:()=>c,ic:()=>n,ji:()=>u,kU:()=>T,p8:()=>a,pY:()=>R,qc:()=>h,rO:()=>p,ue:()=>E});const a=process.env.PORT,o=process.env.SALT_ROUNDS,r=process.env.JWT_SECRET_KEY,n=process.env.JWT_SECRET_REFRESH_KEY,i=120,l=3600,c=process.env.TM_AUTH_TOKEN,d=process.env.TM_BASEURL,u=process.env.DB_TM_PORT,I=process.env.DB_TM_ORIGIN,p=process.env.DB_TM_USER,_=process.env.DB_TM_PASS,E=process.env.DB_OSX_NAME,g=process.env.DB_OSX_PORT,R=process.env.DB_OSX_ORIGIN,h=process.env.DB_OSX_USER,T=process.env.DB_OSX_PASS},260:(e,t,s)=>{s.a(e,(async(e,t)=>{try{var a=s(672),o=s(460),r=s(993);try{await Promise.all([o.A.authenticate(),r.A.authenticate()]),console.log(a.green("✅ Database Connection has been established successfully."))}catch(e){console.log(a.red("❌ Unable to connect to the database:")),console.dir(e)}t()}catch(e){t(e)}}),1)},993:(e,t,s)=>{s.d(t,{A:()=>r});var a=s(31),o=s(24);const r=new a.Sequelize(o.ue,o.qc,o.kU,{host:o.pY,dialect:"mssql",port:o.YL,logging:!1})},460:(e,t,s)=>{s.d(t,{A:()=>r});var a=s(31),o=s(24);const r=new a.Sequelize("Teammate",o.rO,o.VE,{host:o.II,dialect:"mssql",port:o.ji,logging:!1})},14:(e,t,s)=>{s.d(t,{A:()=>o});var a=s(930);const o=(e,t,s)=>{try{const o=e.headers.authorization?.split(" ")[1];if(!o)return t.sendStatus(401);const r=(0,a.$Y)(o);if(!r.success)return t.status(403).json({message:"Authentication is required!"});e.user=r.data,s()}catch(e){return t.sendStatus(401)}}},84:(e,t,s)=>{s.d(t,{A:()=>r});var a=s(853),o=s(719);const r=async(e,t,s)=>{try{const{username:r}=e.user||{};if(!r)return t.status(401).json({message:"Process is unauthorized!"});const n=await a.A.findOne({where:{username:r}}),{role:i}=n.toJSON();if(i!==o.A.ADMIN)return t.status(401).json({message:"Process is unauthorized"});s()}catch(e){return t.sendStatus(401)}}},853:(e,t,s)=>{s.d(t,{A:()=>n});var a=s(31),o=s(672);const r=s(460).A.define("User",{id:{primaryKey:!0,type:a.DataTypes.INTEGER,autoIncrement:!0},email:{type:a.DataTypes.STRING,allowNull:!1},username:{type:a.DataTypes.STRING,allowNull:!1},firstname:{type:a.DataTypes.STRING},lastname:{type:a.DataTypes.STRING},password:{type:a.DataTypes.STRING},role:{type:a.DataTypes.STRING,allowNull:!1}},{timestamps:!0});r.sync({alter:!0}).then((()=>{console.log(o.green("✅ Users table is created/altered successfully"))}));const n=r},513:(e,t,s)=>{s.d(t,{A:()=>Oe});var a=s(252),o=s(14);const r=require("cron");var n=s(716);const i=require("fs/promises");var l=s(928),c=s(347);const d=l.join(c.B,"/src/data/settings.json");var u=s(672),I=s(993);const p=async()=>{try{const[e]=await I.A.query("\nselect  ou1.ORG_ID as ORG_ID_Level1, ou1.org_name as ORG_NAME_Level1,  ou2.ORG_ID  as ORG_ID_Level2, ou2.org_name  as ORG_NAME_Level2,\nou3.ORG_ID  as ORG_ID_Level3,ou3.org_name  as ORG_NAME_Level3,ou4.ORG_ID  as ORG_ID_Level4, ou4.org_name  as ORG_NAME_Level4,\na.ACTIVITY_ID,a.ACTIVITY_NAME,\n p.PROCESS_ID, p.PROCESS_DESC, risk_id, risk_name, RISK_DESCRIPTION, rc.RISK_CATEGORY_ID, cast( rc.RISK_CATEGORY_LONG_DESC as nvarchar)\nfrom RISK r\nleft join RISK_CATEGORY rc on r.RISK_CATEGORY_ID=rc.RISK_CATEGORY_ID and rc.DELETED_FLAG='N'\njoin PROCESS p on r.PROCESS_ID=p.PROCESS_ID and p.DELETED_FLAG='N'\njoin ACTIVITY a on p.ACTIVITY_ID=a.ACTIVITY_ID and a.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou4 on a.ORG_ID=ou4.ORG_ID and ou4.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou3 on ou3.ORG_ID=ou4.PARENT_ORG and ou3.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou2 on ou2.ORG_ID=ou3.PARENT_ORG and ou2.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou1 on ou1.ORG_ID=ou2.PARENT_ORG and ou1.DELETED_FLAG='N'\nwhere r.DELETED_FLAG='N' and ou4.ORG_UNIT_LEVEL_ID=3\n\nunion\n\nselect  ou1.ORG_ID as ORG_ID_Level1, ou1.org_name as ORG_NAME_Level1,  ou2.ORG_ID  as ORG_ID_Level2, ou2.org_name  as ORG_NAME_Level2,\nou3.ORG_ID  as ORG_ID_Level3,ou3.org_name  as ORG_NAME_Level3,null  as ORG_ID_Level4, null  as ORG_NAME_Level4,\na.ACTIVITY_ID,a.ACTIVITY_NAME,\n p.PROCESS_ID, p.PROCESS_DESC, risk_id, risk_name, RISK_DESCRIPTION, rc.RISK_CATEGORY_ID, cast( rc.RISK_CATEGORY_LONG_DESC as nvarchar)\nfrom RISK r\nleft join RISK_CATEGORY rc on r.RISK_CATEGORY_ID=rc.RISK_CATEGORY_ID and rc.DELETED_FLAG='N'\njoin PROCESS p on r.PROCESS_ID=p.PROCESS_ID and p.DELETED_FLAG='N'\njoin ACTIVITY a on p.ACTIVITY_ID=a.ACTIVITY_ID and a.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou3 on a.ORG_ID=ou3.ORG_ID  and ou3.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou2 on ou2.ORG_ID=ou3.PARENT_ORG and ou2.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou1 on ou1.ORG_ID=ou2.PARENT_ORG and ou1.DELETED_FLAG='N'\nwhere r.DELETED_FLAG='N' and ou3.ORG_UNIT_LEVEL_ID=2\n\nunion\n\nselect  ou1.ORG_ID as ORG_ID_Level1, ou1.org_name as ORG_NAME_Level1,  ou2.ORG_ID  as ORG_ID_Level2, ou2.org_name  as ORG_NAME_Level2,\nnull  as ORG_ID_Level3,null as ORG_NAME_Level3,null  as ORG_ID_Level4, null  as ORG_NAME_Level4,\na.ACTIVITY_ID,a.ACTIVITY_NAME,\n p.PROCESS_ID, p.PROCESS_DESC, risk_id, risk_name, RISK_DESCRIPTION, rc.RISK_CATEGORY_ID, cast( rc.RISK_CATEGORY_LONG_DESC as nvarchar)\nfrom RISK r\nleft join RISK_CATEGORY rc on r.RISK_CATEGORY_ID=rc.RISK_CATEGORY_ID and rc.DELETED_FLAG='N'\njoin PROCESS p on r.PROCESS_ID=p.PROCESS_ID and p.DELETED_FLAG='N'\njoin ACTIVITY a on p.ACTIVITY_ID=a.ACTIVITY_ID and a.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou2 on a.ORG_ID=ou2.ORG_ID  and ou2.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou1 on ou1.ORG_ID=ou2.PARENT_ORG and ou1.DELETED_FLAG='N'\nwhere r.DELETED_FLAG='N' and ou2.ORG_UNIT_LEVEL_ID=1\n\nunion\n\nselect  ou1.ORG_ID as ORG_ID_Level1, ou1.org_name as ORG_NAME_Level1,  null  as ORG_ID_Level2, null  as ORG_NAME_Level2,\nnull  as ORG_ID_Level3,null  as ORG_NAME_Level3,null  as ORG_ID_Level4, null  as ORG_NAME_Level4,\na.ACTIVITY_ID,a.ACTIVITY_NAME,\n p.PROCESS_ID, p.PROCESS_DESC, risk_id, risk_name, RISK_DESCRIPTION, rc.RISK_CATEGORY_ID, cast( rc.RISK_CATEGORY_LONG_DESC as nvarchar)\nfrom RISK r\nleft join RISK_CATEGORY rc on r.RISK_CATEGORY_ID=rc.RISK_CATEGORY_ID and rc.DELETED_FLAG='N'\njoin PROCESS p on r.PROCESS_ID=p.PROCESS_ID and p.DELETED_FLAG='N'\njoin ACTIVITY a on p.ACTIVITY_ID=a.ACTIVITY_ID and a.DELETED_FLAG='N'\njoin ORGANISATION_UNIT ou1 on a.ORG_ID=ou1.ORG_ID  and ou1.DELETED_FLAG='N'\nwhere r.DELETED_FLAG='N' and ou1.ORG_UNIT_LEVEL_ID=0\n");return function(e){const t=new Map,s=new Map;e.forEach((e=>{if(e.ORG_ID_Level1&&(t.has(e.ORG_ID_Level1)||t.set(e.ORG_ID_Level1,{id:e.ORG_ID_Level1,title:e.ORG_NAME_Level1,parentId:null})),e.ORG_ID_Level2){const s=e.ORG_ID_Level1;t.has(e.ORG_ID_Level2)?t.get(e.ORG_ID_Level2).parentId=s:t.set(e.ORG_ID_Level2,{id:e.ORG_ID_Level2,title:e.ORG_NAME_Level2,parentId:s})}if(e.ORG_ID_Level3){const s=e.ORG_ID_Level2||e.ORG_ID_Level1;t.has(e.ORG_ID_Level3)?t.get(e.ORG_ID_Level3).parentId=s:t.set(e.ORG_ID_Level3,{id:e.ORG_ID_Level3,title:e.ORG_NAME_Level3,parentId:s})}if(e.ORG_ID_Level4){const s=e.ORG_ID_Level3||e.ORG_ID_Level2||e.ORG_ID_Level1;t.has(e.ORG_ID_Level4)?t.get(e.ORG_ID_Level4).parentId=s:t.set(e.ORG_ID_Level4,{id:e.ORG_ID_Level4,title:e.ORG_NAME_Level4,parentId:s})}if(e.ACTIVITY_ID){const s=e.ORG_ID_Level4||e.ORG_ID_Level3||e.ORG_ID_Level2||e.ORG_ID_Level1;t.has(e.ACTIVITY_ID)?t.get(e.ACTIVITY_ID).parentId=s:t.set(e.ACTIVITY_ID,{id:e.ACTIVITY_ID,title:e.ACTIVITY_NAME,parentId:s})}if(e.PROCESS_ID){const s=e.ACTIVITY_ID||e.ORG_ID_Level4||e.ORG_ID_Level3||e.ORG_ID_Level2||e.ORG_ID_Level1;t.has(e.PROCESS_ID)?t.get(e.PROCESS_ID).parentId=s:t.set(e.PROCESS_ID,{id:e.PROCESS_ID,title:e.PROCESS_DESC,parentId:s})}if(e.risk_id&&!s.has(e.risk_id)){const t=e.PROCESS_ID||e.ACTIVITY_ID||e.ORG_ID_Level4||e.ORG_ID_Level3||e.ORG_ID_Level2||e.ORG_ID_Level1;s.set(e.risk_id,{id:e.risk_id,title:e.risk_name,parentId:t})}}));const a=[...t].map((([,e])=>e));a.forEach((e=>{e.parentId||_(a,e,0)}));const o=Math.max(...a.map((e=>e.level)));return{cabinets:a.filter((e=>!e.parentId)),folders:a.filter((e=>e.parentId||0===e.parentId)),levels:o,risks:[...s].map((([,e])=>e))}}(e)}catch(e){throw console.dir({error:e}),new Error("Couldn't get 'One Sum X' risks")}};function _(e,t,s=0){t.level=s,e.filter((e=>e.parentId===t.id)).forEach((t=>{_(e,t,s+1)}))}var E=s(31),g=s(460);const R=g.A.define("Cabinet",{id:{primaryKey:!0,type:E.DataTypes.INTEGER},oneSumXId:{type:E.DataTypes.INTEGER,allowNull:!1},title:{type:E.DataTypes.STRING,allowNull:!1}},{timestamps:!0});R.sync({alter:!0}).then((()=>{console.log(u.green("✅ Cabinet table is created/altered successfully"))}));const h=R,T=require("axios");var m=s(24);const O=T.create({baseURL:m.I1,headers:{Authorization:m.iK},timeout:6e4}),D=e=>O.post("/Cabinets",{objectTypeId:24,title:e,author:"Sync System",securityType:null,groups:[]}),y=e=>O.get(`/Cabinets/${e}`,{params:{objectTypeId:24}}),A=e=>new Promise((t=>{setTimeout((()=>{t()}),e)}));var w=s(11);const S="Done",f="InProgress",N="Failed",v=new class{#e=0;#t=0;#s=null;get inProgress(){return this.#s===f}get done(){return!this.#s||this.#s===S}get failed(){return this.#s===N}get status(){return this.#s}get progressPct(){return isNaN(this.#e)?null:0!==this.#e?+(100*this.#e/this.#t).toFixed(1):this.#e}startSync(){this.#s=f,this.#e=0}endSync(e=!1){this.#s=e?N:S,this.#e=0,this.#t=0}updateProgress(e=1){return this.#t-this.#e>=e&&(this.#e+=e),+(100*this.#e/this.#t).toFixed(1)}setTotalSyncOperation(e){this.#t=e}};async function C(e){await A(4e3),await Promise.all(e.map((e=>async function(e){const{id:t,title:s}=e;let a=await h.findOne({where:{oneSumXId:t}}),o=null;if(a){const e=a.toJSON();try{o=await y(e.id).then((e=>e.data)).catch((e=>(w.A.dir(e.message),null))),o=o?await((e,t)=>O.patch(`/Cabinets/${e}`,[{path:"/title",op:"Replace",value:t}],{params:{objectTypeId:24}}))(e.id,s).then((e=>e.data)):await D(s).then((e=>e.data)),a.title=s,o&&(a.id=o.id),await a.save(),w.A.log(`Cabinet (${a.id}) updated!`)}catch(t){throw w.A.dir(t),new Error("Couldn't update a Cabinet "+(a?`of title (${a.title}) ID = ${e.id}`:""))}}else try{o=await D(s).then((e=>e.data)),a=await h.create({id:o.id,oneSumXId:t,title:s}),w.A.log(`Cabinet (${a?.id}) created!`)}catch(e){throw o&&await(e=>O.delete(`/Cabinets/${e}`,{params:{objectTypeId:24}}))(o.id),w.A.dir(e),new Error("Couldn't create a Cabinet "+(o?`of title (${o.title})`:""))}}(e)))),v.updateProgress(e.length)}const G=g.A.define("RiskFolder",{id:{primaryKey:!0,type:E.DataTypes.INTEGER},oneSumXId:{type:E.DataTypes.INTEGER,allowNull:!1},parentId:{type:E.DataTypes.INTEGER,allowNull:!1},title:{type:E.DataTypes.STRING,allowNull:!1}},{timestamps:!0});G.sync({alter:!0}).then((()=>{console.log(u.green("✅ Risk Folders table is created/altered successfully"))}));const L=G,b=g.A.define("FolderMap",{id:{primaryKey:!0,type:E.DataTypes.INTEGER,autoIncrement:!0},oneSumXId:{type:E.DataTypes.INTEGER,allowNull:!1},riskFolderId:{type:E.DataTypes.INTEGER},controlFolderId:{type:E.DataTypes.INTEGER}},{timestamps:!0});b.sync({alter:!0}).then((()=>{console.log(u.green("✅ FolderMap table is created/altered successfully"))}));const j=b,F="RISK",P=({title:e,parentId:t,parentIsFolder:s=!0,folderType:a=F})=>{const o={objectTypeId:a===F?24:25,title:e,parentId:t,parentTypeId:s?22:52};return O.post("/Folders",o)},k=(e,t=F)=>O.get(`/Folders/${e}`,{params:{objectTypeId:t===F?24:25}}),Y=(e,t,s=F)=>O.patch(`/Folders/${e}`,[{path:"/title",op:"Replace",value:t}],{params:{objectTypeId:s===F?24:25}}),$=(e,t=F)=>O.delete(`/Folders/${e}`,{params:{objectTypeId:t===F?24:25}}),M=g.A.define("ControlFolder",{id:{primaryKey:!0,type:E.DataTypes.INTEGER},oneSumXId:{type:E.DataTypes.INTEGER,allowNull:!1},parentId:{type:E.DataTypes.INTEGER,allowNull:!1},title:{type:E.DataTypes.STRING,allowNull:!1}},{timestamps:!0});M.sync({alter:!0}).then((()=>{console.log(u.green("✅ Control Folders table is created/altered successfully"))}));const U=M,x=5;async function K(e,t,s){const a=[...new Set(e.map((e=>e.parentId)))];for(let o=0;o<a.length;o++){const r=a[o],n=e.filter((e=>e.parentId===r));w.A.log(u.bgBlue.white(`\n --- Subfolders of ${t?"Parent Folder Id=":"Cabinet Id="} (${r})\n`)),await V(n,t,s)}}async function V(e,t,s){const a=e.length,o=Math.ceil(a/x);let r=[];for(let a=0;a<o;a++)r=e.slice(a*x,a*x+x),w.A.log(u.bold.blue(`--------- BATCH ${a} ---------`)),await A(4e3),await Promise.all(r.map((e=>q(e,t,s)))),v.updateProgress(r.length)}async function q(e,t,s){const{id:a,title:o,parentId:r}=e;w.A.log(`⏳ Handling Folder (osxID:${a})`);const n=s===F,i=n?L:U,l=t?i:h;let c=await i.findOne({where:{oneSumXId:a}}),d=null,u=null;if(d=await l.findOne({where:{oneSumXId:r}}),c){const a=c.toJSON(),{data:r,error:n}=await k(a.id,s).then((e=>({data:e.data}))).catch((e=>404===e.response.status?{data:null}:{data:null,error:e.message}));if(u=r,n)throw w.A.dir(n),new Error("Couldn't update a Folder "+(c?`of title (${c.title}) ID=${c.id} - LEVEL ${e.level}`:""));if(u)try{u=await Y(c.id,o,s).then((e=>e.data))}catch(t){throw w.A.dir(t),new Error("Couldn't update a Folder "+(c?`of title (${c.title}) ID=${c.id} - LEVEL ${e.level}`:""))}else u=await P({title:o,parentId:d.id,parentIsFolder:t,folderType:s}).then((e=>e.data));c.title=o,u&&(c.id=u.id),await c.save()}else try{u=await P({title:o,parentId:d.id,parentIsFolder:t,folderType:s}).then((e=>e.data)),c=await i.create({id:u?.id,title:o,parentId:d.id,oneSumXId:a})}catch(t){throw u&&await $(u.id,s),w.A.dir(t),new Error("Couldn't create a Folder "+(u?`of title (${u.title}) LEVEL ${e.level}`:""))}const I=await j.findOne({where:{oneSumXId:a}}),p=n?"riskFolderId":"controlFolderId";I?(I[p]=c.toJSON().id,await I.save()):await j.create({oneSumXId:a,[p]:c.toJSON().id}),w.A.log(`✔️ Handled Folder (osxID:${e.id} => tmID:${c?.id}) of LEVEL ${e.level}`)}const J=g.A.define("Risk",{id:{primaryKey:!0,type:E.DataTypes.INTEGER},oneSumXId:{type:E.DataTypes.INTEGER,allowNull:!1},parentId:{type:E.DataTypes.INTEGER,allowNull:!1},title:{type:E.DataTypes.STRING,allowNull:!1}},{timestamps:!0});J.sync({alter:!0}).then((()=>{console.log(u.green("✅ Risk table is created/altered successfully"))}));const X=J,H=(e,t)=>O.post("/Risks",{parentFolderId:t,title:e});async function z(e){const{id:t,title:s,parentId:a}=e;w.A.log(`⏳ Handling Risk (osxID:${t})`);let o=await X.findOne({where:{oneSumXId:t}}),r=null,n=null;if(r=await L.findOne({where:{oneSumXId:a}}),o){const e=o.toJSON(),{data:t,error:a}=await(i=e.id,O.get(`/Risks/${i}`)).then((e=>({data:e.data}))).catch((e=>({data:null,error:e})));if(n=t,404!==a?.response?.status)throw w.A.dir(a),new Error("Couldn't update a Risk "+(o?`of title (${o.title}) ID=${o.id}`:""));if(n)n=await H(s,r.id).then((e=>e.data));else try{n=await((e,t)=>O.patch(`/Risks/${e}`,[{path:"/title",op:"Replace",value:t}]))(o.id,s).then((e=>e.data)),o.id=n.id,o.title=s,await o.save()}catch(e){throw w.A.dir(e),new Error("Couldn't update a Risk "+(o?`of title (${o.title}) ID=${o.id}`:""))}}else try{n=await H(s,r.id).then((e=>e.data)),o=await X.create({id:n?.id,title:s,parentId:r.id,oneSumXId:t})}catch(e){throw n&&await(e=>O.delete(`/Risks/${e}`))(n.id),w.A.dir(e),new Error("Couldn't create a Risk "+(n?`of title (${n.title})`:""))}var i;w.A.log(`✔️ Handled Risk (osxID:${e.id} => tmID:${o?.id}) `)}const B=g.A.define("Control",{id:{primaryKey:!0,type:E.DataTypes.INTEGER},riskOsxId:{type:E.DataTypes.INTEGER,allowNull:!1},oneSumXId:{type:E.DataTypes.INTEGER,allowNull:!1},parentId:{type:E.DataTypes.INTEGER,allowNull:!1},title:{type:E.DataTypes.STRING,allowNull:!1}},{timestamps:!0});B.sync({alter:!0}).then((()=>{console.log(u.green("✅ Control table is created/altered successfully"))}));const Q=B,W=(e,t)=>O.post("/Controls",{parentFolderId:t,title:e});async function Z(e){const{id:t,title:s,parentId:a,riskId:o}=e;w.A.log(`⏳ Handling Control (osxID:${t})`);let r=await Q.findOne({where:{oneSumXId:t}}),n=null,i=null;if(n=await U.findOne({where:{id:a}}),w.A.log({control:e,parentInfo:n?.toJSON()}),r){const e=r.toJSON(),{data:t,error:a}=await(l=e.id,O.get(`/Controls/${l}`)).then((e=>({data:e.data}))).catch((e=>404===e.response.status?{data:null}:{data:null,error:e.message}));if(i=t,a)throw new Error("Couldn't update a Control "+(r?`of title (${r.title}) ID=${r.id}`:""));if(i)try{i=await((e,t)=>O.patch(`/Controls/${e}`,[{path:"/title",op:"Replace",value:t}]))(r.id,s).then((e=>e.data))}catch(e){throw w.A.dir(e),new Error("Couldn't update a Control "+(r?`of title (${r.title}) ID=${r.id}`:""))}else i=await W(s,n.id).then((e=>e.data));r.title=s,i&&(r.id=i.id),await r.save()}else try{i=await W(s,n.id).then((e=>e.data)),r=await Q.create({id:i?.id,title:s,parentId:n.id,oneSumXId:t,riskOsxId:o})}catch(e){throw i&&await(e=>O.delete(`/Controls/${e}`))(i.id),w.A.dir(e),new Error("Couldn't create a Control "+(i?`of title (${i.title})`:""))}var l;w.A.log(`✔️ Handled Control (osxID:${e.id} => tmID:${r?.id}) `)}async function ee(e){w.A.log(`Get data by riskid: ${e}`);const t=await X.findOne({where:{oneSumXId:e}});if(!t)return;w.A.log(t?.toJSON());const s=await j.findOne({where:{riskFolderId:t?.parentId}});w.A.log("folderMap:"),w.A.log(s?.toJSON());const a=await U.findOne({where:{id:s?.controlFolderId}});return w.A.log("control folder:"),w.A.log(a?.toJSON()),a.toJSON()}const te=async()=>{try{const[e]=await I.A.query("\nselect cr.RISK_ID ,c.CONTROL_ID,c.CONTROL_DESC, c.CONTROL_TEXT, c.CONTROL_TYPE_CODE, st.CONTROL_TYPE_DESC, c.CONTROL_CLASSIFICATION, \nf.FREQUENCY_CODE, f.FREQUENCY_DESC, c.FREQUENCY_MONTH\nfrom CONTROL c\njoin CONTROL_FOR_RISK cr on c.CONTROL_ID=cr.CONTROL_ID and cr.DELETED_FLAG='N'\nleft join SOX_CONTROL_TYPE st on c.CONTROL_TYPE_CODE=st.CONTROL_TYPE_CODE\nleft join FREQUENCY f on c.FREQUENCY_CODE=f.FREQUENCY_CODE\nwhere c.DELETED_FLAG='N'\n");return function(e){let t=new Map,s=new Map;return e.forEach((e=>{const{RISK_ID:a,CONTROL_ID:o,CONTROL_DESC:r}=e,n={id:o,title:r,riskId:a};t.has(o)||t.set(o,n),s.has(a)?s.get(a).controls.push(n):s.set(a,{riskId:a,controls:[n]})})),{controls:[...t].map((([,e])=>e)),risksToControls:[...s].map((([,e])=>e))}}(e)}catch(e){throw new Error("Couldn't get 'One Sum X' controls")}},se=require("nodemailer");var ae=s(853);const oe={from:process.env.SMTP_EMAIL,to:"",subject:"Teammate Sync Service",text:""};let re=null;!function(){if(!re)try{re=se.createTransport({host:process.env.SMTP_HOST,port:Number(process.env.SMTP_PORT),secure:!1,auth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASS}}),console.log(`Connected to SMTP Server: ${process.env.SMTP_HOST}`)}catch(e){console.log(`Error Connecting to SMTP Server: ${e}`)}}();const ne=async()=>{if(v.inProgress)return{message:"Syncronization is still in progress",syncStatus:v.status,progress:v.progressPct};const e={message:"Syncronization triggered",syncStatus:v.status};return v.startSync(),async function(){try{const e=await p(),{controls:t,risksToControls:s}=await te(),{cabinets:a,folders:o,risks:r,levels:n}=e;v.setTotalSyncOperation(a.length+2*o.length+r.length+t.length+s.length),w.A.log("\n------------------------------"),w.A.log("      -:{ START Sync }:-     "),w.A.log("------------------------------\n"),await C(a),w.A.log(u.bgGreen.white("✔️ Cabinets syncronized")),w.A.log(u.bgYellow.black("\n------------------")),w.A.log(u.bgYellow.black("-- Risk Folders --")),w.A.log(u.bgYellow.black("------------------\n")),await ie(o,n,F),w.A.log(u.bgYellow.black("\n------------------")),w.A.log(u.bgYellow.black("-- Control Folders --")),w.A.log(u.bgYellow.black("------------------\n")),await ie(o,n,"CONTROL"),w.A.log(u.bgYellow.black("\n-----------")),w.A.log(u.bgYellow.black("-- Risks --")),w.A.log(u.bgYellow.black("-----------\n")),await async function(e){const t=e.length,s=Math.ceil(t/5);let a=[];for(let t=0;t<s;t++)a=e.slice(5*t,5*t+5),w.A.log(u.bold.blue(`--------- BATCH ${t} ---------`)),await A(4e3),await Promise.all(a.map((e=>z(e)))),v.updateProgress(a.length)}(r),w.A.log(u.bgYellow.black("\n-------------")),w.A.log(u.bgYellow.black("-- Controls --")),w.A.log(u.bgYellow.black("-------------\n")),await async function(e){const t=e.length,s=Math.ceil(t/5);let a=[];const o=new Map;for(let t=0;t<s;t++)a=e.slice(5*t,5*t+5),w.A.log(u.bold.blue(`--------- BATCH ${t} ---------`)),await A(4e3),await Promise.all(a.map((async e=>{if(!o.has(e.id)){const t=await ee(e.riskId);t&&o.set(e.id,t.id)}const t=o.get(e.id);t&&Z({...e,parentId:t})}))),v.updateProgress(a.length)}(t),await(async e=>{for(let a=0;a<e.length;a++){const o=e[a],r=await X.findOne({where:{oneSumXId:o.riskId}});if(r){const e=await Q.findAll({where:{riskOsxId:o.riskId}});await(t=r.id,s=e.map((e=>e.id)),void O.patch(`/Risks/${t}`,[{path:"/links",op:"Replace",value:s.map((e=>({id:e,typeId:25})))}]))}v.updateProgress(1)}var t,s})(s),await w.A.log("✅Syncronization done"),v.endSync()}catch(e){w.A.log("❌Syncronization failed"),w.A.log({message:e.message}),v.endSync(!0)}w.A.saveAndFinalize()}(),async function(e){re?(await ae.A.findAll()).map((e=>e.email)).forEach((e=>{let t={...oe};t.to=e,t.text="Syncronization triggered",console.log(`Sending Service Sync Email to: ${e}...`),re.sendMail(t,((t,s)=>{t?console.log(`Error Sending Service Sync Email to: ${e}`):console.log("Email Sent")}))})):console.log("Error: Uninitialized SMTP Server")}(),e};async function ie(e,t,s){u.bgCyan.white(`\n------------- FOLDER TYPE: ${s===F?"RISK":"CONTROL"} -------------\n`);for(let a=1;a<=t;a++){w.A.log(u.bgMagenta.white(`------------- LEVEL ${a} -------------`));const t=e.filter((e=>e.level===a));await K(t,a>1,s)}}const le=new class{cronJobs=[];type=null;time={hours:"*",minutes:"*",seconds:"*"};weekDay=0;monthDay=null;quarterMonths=[];clearAll(){this.cronJobs.forEach((e=>e.stop())),this.cronJobs=[]}getSettings(){return{time:Ie(this.time),type:this.type,weekDay:this.weekDay,monthDay:this.monthDay,quarterMonths:this.quarterMonths}}async setConfig(e){const{type:t,time:s,weekDay:a,monthDay:o,quarterMonths:r,timezone:n}=e;if(!t)throw new Error("a cron job type should be specified");this.type=t;const{data:i,isValid:l}=ue(s);if(this.time=i,!l)throw new Error("Couldn't parse the given time");switch(t){case de.WEEKLY:if(ge(a))throw new Error("Couldn't parse the given day of week");this.weekDay=a,this.cronJobs=pe(a,i,n,ne);break;case de.MONTHLY:if(Re(o))throw new Error("Couldn't parse the given day of month");this.monthDay=o,this.cronJobs=_e(o,i,n,ne);break;case de.QUARTERLY:{const{error:e}=he(r);if(e)throw new Error(e);this.quarterMonths=r,this.cronJobs=Ee(r,i,n,ne);break}}this.start()}async persistConfig(){const e=this.getSettings();await(async e=>{try{return i.writeFile(d,JSON.stringify(e))}catch(e){return new Error("Couldn't save the new settings")}})(e)}start(){this.cronJobs.forEach((e=>e.start()))}destroyAll(){this.cronJobs.forEach((e=>e.stop()))}};(async()=>{const e=await i.readFile(d,{encoding:"utf-8"}).then((e=>JSON.parse(e)));le.setConfig(e)})();const ce=le,de={WEEKLY:"WEEKLY",MONTHLY:"MONTHLY",QUARTERLY:"QUARTERLY"},ue=e=>{let t=!0,s=null;try{const[t,a,o]=e.split(":");s={hours:t??"*",minutes:a??"*",seconds:o??"*"}}catch(e){t=!1,s=null}return{isValid:t,data:s}},Ie=e=>{const{hours:t,minutes:s,seconds:a}=e;return"*"!==t&&"*"!==s&&"*"!==a?`${t}:${s}:${a}`:null},pe=(e,t,s,a)=>{const{hours:o,minutes:n,seconds:i}=t,l=`${i} ${n} ${o} * * ${e}`;return[r.CronJob.from({cronTime:l,start:!1,onTick:a,timeZone:s})]},_e=(e,t,s,a)=>{const{hours:o,minutes:n,seconds:i}=t,l=`${i} ${n} ${o} ${e} * *`;return[r.CronJob.from({cronTime:l,start:!1,onTick:a,timeZone:s})]},Ee=(e,t,s,a)=>{const{hours:o,minutes:i,seconds:l}=t;return e.map((e=>r.CronJob.from({cronTime:`${l} ${i} ${o} ${n(e).format("D")} ${n(e).format("M")} *`,start:!1,onTick:a,timeZone:s})))},ge=e=>!e&&0!==e||e<0||e>7,Re=e=>!e||e<1||e>28,he=e=>e?.length?e.every((e=>n(e).isValid()))?{error:null}:{error:"Quarter day(s) are invalid!"}:{error:"Couldn't find the quarter days"};var Te=s(84);const me=a.Router();me.get("/settings",o.A,((e,t)=>t.json(ce.getSettings()))),me.get("/osx-data",(async(e,t)=>{try{const e=await te(),s=await p();t.json({...s,...e})}catch(e){t.status(400)}})),me.get("/progress",((e,t)=>{try{t.json({progress:v.progressPct,syncStatus:v.status})}catch(e){t.status(400).json({message:e.message})}})),me.post("/settings",o.A,((e,t)=>{const s=e.body;try{ce.setConfig(s),ce.persistConfig(),t.json({message:"Done"})}catch(e){t.status(400).json({message:e.message})}})),me.post("/run",o.A,(async(e,t)=>{try{const{message:e,syncStatus:s}=await ne();t.json({message:e,syncStatus:s})}catch(e){t.status(400).json({message:e?.message,syncStatus})}})),me.delete("/tables/rows",o.A,Te.A,(async(e,t)=>{try{await(async()=>{await Promise.all([h.truncate(),X.truncate(),L.truncate(),Q.truncate(),U.truncate()])})(),t.json({message:"All tables are removed successfully!"})}catch(e){t.status(400).json({message:e?.message})}})),me.get("/cabinets/:id",(async(e,t)=>{console.log(e.params);const{id:s}=e.params;try{const e=await y(s).then((e=>e.data));t.json({message:"Hello",cabinet:e})}catch(e){t.status(400).json({error:e.message})}}));const Oe=me},542:(e,t,s)=>{s.d(t,{A:()=>u});var a=s(252),o=(s(896),s(928),s(14),s(84),s(455)),r=s(760),n=s(347),i=s(11);const l=(...e)=>r.join(n.B,"src",...e),c=l(i.A.logsFolderName),d=a.Router();d.get("/files",(async(e,t)=>{try{const e=await o.readdir(c);t.send(e)}catch(e){t.status(500).json({message:"Couldn't process the log files"})}})),d.get("/files/:filename",(async(e,t)=>{try{const s=e.params.filename;if(!s)return void t.status(400).json({message:"Filename must be provided as url param"});const a=l(i.A.logsFolderName,s),r=await(async e=>{try{return(await o.open(e)).close(),!0}catch(e){if("ENOENT"===e.code)return!1;throw e}})(a);if(!r)return void t.status(404).json({message:`File "${s}" is not found`});const n=await o.readFile(a,{encoding:"utf-8"});t.send(n)}catch(e){t.status(500).json({message:"Couldn't process the requested file"})}}));const u=d},275:(e,t,s)=>{s.d(t,{A:()=>I});var a=s(252);const o=require("bcryptjs");var r=s(24),n=s(853),i=s(930),l=s(719),c=s(14),d=s(84);const u=a.Router();u.post("/register",(async(e,t)=>{const{username:s,password:a,firstname:i,lastname:c,email:d}=e.body;if(await n.A.findOne({where:{username:s}}))t.status(400).json({message:"User already exists"});else{d||t.status(400).json({message:"Email is not "});try{const e=await o.genSalt(+r.U9),u=await o.hash(a,e),I=await n.A.create({username:s,firstname:i,lastname:c,email:d,password:u,role:l.A.USER}),{password:p,..._}=I.toJSON();t.json({message:"User is created",user:_})}catch(e){t.status(400).json({message:"Couldn't create the user"})}}})),u.patch("/user",c.A,(async(e,t)=>{const{firstname:s,lastname:a,email:o}=e.body,{username:r}=e.user;try{const e=await n.A.findOne({where:{username:r}});if(!e)return void t.status(401);const{password:l,...c}=e.toJSON(),d={firstname:s??c.firstname,lastname:a??c.lastname,email:o??c.email};await n.A.update(d,{where:{username:r}}),console.log({...c,...d});const u=(0,i.Vg)({...c,...d});t.json({message:"Authorization succeeded",idToken:u})}catch(e){t.status(400).json({message:"Failed to update user"})}})),u.patch("/password",c.A,(async(e,t)=>{const{password:s,newPassword:a}=e.body,{username:l}=e.user;try{const e=await n.A.findOne({where:{username:l}});if(!e)return void t.status(401);if(!await o.compare(s,e.password))return void t.status(401);const{password:c,...d}=e.toJSON(),u=await o.genSalt(+r.U9),I=await o.hash(a,u);await n.A.update({password:I},{where:{username:l}});const p=(0,i.Vg)(d);t.json({message:"Authorization succeeded",idToken:p})}catch(e){t.status(400).json({message:"Failed to update user"})}})),u.post("/login",(async(e,t)=>{const{username:s,password:a}=e.body,r=await n.A.findOne({where:{username:s}});if(!r)return void t.status(401).json({message:"User doesn't exist or password is wrong"});if(!await o.compare(a,r.password))return void t.status(401).json({message:"User doesn't exist or password is wrong"});const{password:l,...c}=r.toJSON(),d=(0,i.Vg)(c),u=(0,i.cC)(c);t.json({message:"Authorization succeeded",idToken:d,refreshToken:u})})),u.post("/token/refresh",(async(e,t)=>{const s=e.body.refreshToken;if(!s)return t.sendStatus(401);const a=(0,i.En)(s);if(!a.success)return t.status(403).json({error:"Refresh token expired!"});const o=await n.A.findOne({where:{username:a.data.username}});if(!o)return void t.status(401);const{password:r,...l}=o.toJSON(),c=(0,i.Vg)(l),d=(0,i.cC)(l);t.json({idToken:c,refreshToken:d})})),u.get("/users",c.A,d.A,(async(e,t)=>{try{const e=(await n.A.findAll({where:{role:l.A.USER}})).map((e=>e.toJSON()));console.log(e),t.json({message:"Data retreived!",users:e})}catch(e){t.status(400).json({message:"Couldn't retrieve the list of users"})}})),u.get("/users/:id",c.A,d.A,(async(e,t)=>{try{const{id:s}=e.params,a=await n.A.findOne({where:{id:s}}),{password:o}=a.toJSON();console.log(users),t.json({message:"Data retreived!",users})}catch(e){t.status(400).json({message:"Couldn't retrieve the list of users"})}})),u.patch("/users/:id",c.A,d.A,(async(e,t)=>{try{const{id:s}=e.params,{firstname:a,lastname:o,email:r,username:i}=e.body,l=n.A.findOne({where:{id:s}});if(!l)return void t.status(404).json({message:"User is not found!"});if(i&&i.trim().length<6)return void t.status(400).json({message:"Username length should be minimum 6 characters!"});const{password:c,...d}=l.toJSON(),u={firstname:a??d.firstname,lastname:o??d.lastname,email:r??d.email,username:i??d.username};await n.A.update(u,{where:{id:s}}),t.status(200).json({message:"User updated successfully!"})}catch(e){t.status(400).json({message:`Failed to update user of id = ${id}`})}})),u.patch("/users/:id/role",c.A,d.A,(async(e,t)=>{try{const{id:s}=e.params,{role:a}=e.body;if(!n.A.findOne({where:{id:s,role:l.A.USER}}))return void t.status(404).json({message:`Couldn't find a normal user with id = ${s}`});if(!l.A[a])return void t.status(400).json({message:`Role ${a} is not a valid role`});await n.A.update({role:a},{where:{id:s}}),t.status(200).json({message:`User granted a new role (${a}) successfully!`})}catch(e){t.status(400).json({message:`Failed to update user of id = ${id}`})}})),u.delete("/users/:id",c.A,d.A,(async(e,t)=>{try{const{id:s}=e.params;if(!n.A.findOne({where:{id:s,role:l.A.USER}}))return void t.status(404).json({message:`Couldn't find a normal user with id = ${s}`});await n.A.destroy({where:{id:s}}),t.status(200).json({message:"User removed successfully!"})}catch(e){t.status(400).json({message:`Failed to delete user of id = ${id}`})}}));const I=u},11:(e,t,s)=>{s.d(t,{A:()=>d});var a=s(455),o=s(760);const r=require("node:util");var n=s(716),i=s(347);const l=(...e)=>o.join(i.B,"src",...e);class c{static currLogFile;static#a="syncLogs";static#o="log";static logs="";static error;constructor(){console.log("test")}static get logsFolderName(){return c.#a}static get fileExtension(){return c.#o}static async init(){console.log("Initializing Logs folder .. ");const e=l(c.#a);try{(await a.opendir(e)).closeSync()}catch(t){try{await a.mkdir(e),console.log("✔️ Logs Folder created successfully")}catch(e){console.log("❌ Couldn't create the folder"),c.error=e?.message||"Couldn't create the folder"}}}static#r(...e){if(c.error)throw console.log(c.error),new Error(c.error);c.currLogFile||(c.currLogFile=`${n().format().replace(/:/g,"_")}`),c.logs+=`\n${r.format(...e)}`}static log(...e){c.#r(...e),console.log(...e)}static dir(...e){c.#r(...e),console.dir(...e)}static async saveAndFinalize(){if(c.error)throw console.log(c.error),new Error(c.error);if(!c.currLogFile)throw new Error("Current filename is not specified");const e=l(c.#a,`${c.currLogFile}.${c.#o}`);try{await a.writeFile(e,c.logs,"utf8"),c.currLogFile=null,c.logs="",c.error=null}catch(e){throw console.dir(e),new Error("Couldn't create or save the sync process logs")}}}const d=c},930:(e,t,s)=>{s.d(t,{Vg:()=>n,cC:()=>i,$Y:()=>r,En:()=>l});var a=s(24);const o=require("jsonwebtoken");function r(e){try{return{success:!0,data:o.verify(e,a.Hf)}}catch(e){return{success:!1,error:e.message}}}const n=e=>o.sign(e,a.Hf,{expiresIn:a.dN}),i=e=>o.sign(e,a.ic,{expiresIn:a.gd}),l=e=>{try{return{success:!0,data:o.verify(e,a.ic)}}catch(e){return{success:!1,error:e.message}}}},71:(e,t,s)=>{s.d(t,{A:()=>o});const a=["/sync/progress"],o=(e,t,s)=>{const{method:o,url:r}=e;a.includes(r)||console.log("Request: ",{method:o,endpoint:r}),s()}},764:(e,t,s)=>{s.d(t,{A:()=>u});var a=s(896),o=s(928);const r=require("swagger-jsdoc"),n=require("swagger-ui-express");var i=s(347);const l=o.join(i.B,"/package.json"),{version:c}=JSON.parse(a.readFileSync(l,{encoding:"utf-8"})),d=r({definition:{openapi:"3.0.0",info:{title:"Teammate Connector API Docs",version:c},components:{securitySchemes:{bearerAuth:{type:"http",scheme:"bearer",bearerFormat:"JWT"}}},security:[{bearerAuth:[]}]},apis:["./src/routes/*.js"]}),u=function(e){e.use("/docs",n.serve,n.setup(d)),e.get("/docs.json",((e,t)=>{t.setHeader("Content-Type","application/json"),t.send(d)}))}},719:(e,t,s)=>{s.d(t,{A:()=>a});const a={ADMIN:"ADMIN",USER:"USER"}}},r={};function n(e){var t=r[e];if(void 0!==t)return t.exports;var s=r[e]={exports:{}};return o[e](s,s.exports,n),s.exports}n.m=o,e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",s="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",a=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},n.a=(o,r,n)=>{var i;n&&((i=[]).d=-1);var l,c,d,u=new Set,I=o.exports,p=new Promise(((e,t)=>{d=t,c=e}));p[t]=I,p[e]=e=>(i&&e(i),u.forEach(e),p.catch((e=>{}))),o.exports=p,r((o=>{var r;l=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[e])return o;if(o.then){var r=[];r.d=0,o.then((e=>{n[t]=e,a(r)}),(e=>{n[s]=e,a(r)}));var n={};return n[e]=e=>e(r),n}}var i={};return i[e]=e=>{},i[t]=o,i})))(o);var n=()=>l.map((e=>{if(e[s])throw e[s];return e[t]})),c=new Promise((t=>{(r=()=>t(n)).r=0;var s=e=>e!==i&&!u.has(e)&&(u.add(e),e&&!e.d&&(r.r++,e.push(r)));l.map((t=>t[e](s)))}));return r.r?c:n()}),(e=>(e?d(p[s]=e):c(I),a(i)))),i&&i.d<0&&(i.d=0)},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.p="/",n.b=require("url").pathToFileURL(__filename),n(620)})();